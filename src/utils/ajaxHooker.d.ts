// ajaxHooker.d.ts

/**
 * code generated by claude sonnet 4
 */
declare global {
	interface Window {
		__ajaxHooker?: AjaxHookerGlobal;
		secsdk?: {
			csrf?: {
				nativeXMLHttpRequestSetRequestHeader?: Function;
				nativeXMLHttpRequestOpen?: Function;
				nativeXMLHttpRequestSend?: Function;
			};
		};
	}
}

/**
 * 请求类型
 */
export type RequestType = "xhr" | "fetch";

/**
 * 过滤器配置
 */
export interface FilterConfig {
	/** 请求类型过滤 */
	type?: RequestType;
	/** URL 过滤，支持字符串包含匹配或正则表达式 */
	url?: string | RegExp;
	/** HTTP 方法过滤 */
	method?: string;
	/** 是否异步请求过滤 */
	async?: boolean;
}

/**
 * 请求对象接口
 */
export interface AjaxRequest {
	/** 请求类型 */
	type: RequestType;
	/** 请求 URL */
	url: string;
	/** HTTP 方法 */
	method: string;
	/** 是否中止请求 */
	abort: boolean;
	/** 请求头 */
	headers: Record<string, string>;
	/** 请求数据 */
	data: any;
	/** 响应处理函数 */
	response: ResponseHandler | null;
	/** 是否异步 */
	async: boolean;
	/** 是否携带身份认证如cookie */
	credentials: "omit" | "include" | "same-origin";
}

/**
 * XHR 响应对象
 */
export interface XhrResponse {
	/** 最终 URL */
	finalUrl: string;
	/** 状态码 */
	status: number;
	/** 响应头 */
	responseHeaders: Record<string, string>;
	/** 响应内容 */
	response?: any;
	/** 响应文本 */
	responseText?: string;
	/** 响应 XML */
	responseXML?: Document | null;
}

/**
 * Fetch 响应对象
 */
export interface FetchResponse {
	/** 最终 URL */
	finalUrl: string;
	/** 状态码 */
	status: number;
	/** 响应头 */
	responseHeaders: Record<string, string>;
	/** arrayBuffer 数据 */
	arrayBuffer?: ArrayBuffer;
	/** blob 数据 */
	blob?: Blob;
	/** formData 数据 */
	formData?: FormData;
	/** JSON 数据 */
	json?: any;
	/** 文本数据 */
	text?: string;
}

/**
 * 响应处理函数类型
 */
export type ResponseHandler = (
	response: XhrResponse | FetchResponse,
) => void | Promise<void>;

/**
 * 钩子函数类型
 */
export type HookFunction = (request: AjaxRequest) => void | Promise<void>;

/**
 * ajaxHooker 实例接口
 */
export interface AjaxHookerInstance {
	/**
	 * 添加钩子函数
	 * @param fn 钩子函数，接收请求对象作为参数
	 * @returns 无返回值
	 */
	hook: (fn: HookFunction) => void;

	/**
	 * 设置过滤器
	 * @param filters 过滤器配置数组
	 * @returns 无返回值
	 */
	filter: (filters: FilterConfig[]) => void;

	/**
	 * 保护钩子不被覆盖
	 * @returns 无返回值
	 */
	protect: () => void;

	/**
	 * 移除钩子
	 * @returns 无返回值
	 */
	unhook: () => void;
}

/**
 * 全局 ajaxHooker 对象接口
 */
export interface AjaxHookerGlobal {
	/** 版本号 */
	version: string;
	/** 伪造的 XMLHttpRequest */
	fakeXHR: typeof XMLHttpRequest;
	/** 伪造的 fetch */
	fakeFetch: typeof fetch;
	/** 伪造的 Response.prototype.clone */
	fakeFetchClone: () => Response;
	/** 原始 XMLHttpRequest */
	realXHR: typeof XMLHttpRequest;
	/** 原始 fetch */
	realFetch: typeof fetch;
	/** 原始 Response.prototype.clone */
	realFetchClone: () => Response;
	/** 钩子实例集合 */
	hookInsts: Set<HookInstance>;
}

/**
 * 内部钩子实例接口
 */
export interface HookInstance {
	/** 钩子函数数组 */
	hookFns: HookFunction[];
	/** 过滤器数组 */
	filters: FilterConfig[];
}

/**
 * 扩展的 XMLHttpRequest 接口
 */
export interface ExtendedXMLHttpRequest extends XMLHttpRequest {
	__ajaxHooker?: {
		originalXhr: XMLHttpRequest;
		proxyXhr: XMLHttpRequest;
		resThenable: any;
		proxyProps: Record<string, any>;
		proxyEvents: Record<string, any>;
		request?: AjaxRequest;
		openArgs?: any[];
	};
}

/**
 * ajaxHooker 主函数
 * @returns ajaxHooker 实例
 */
declare const ajaxHooker: AjaxHookerInstance;

export default ajaxHooker;

// 使用示例的类型定义
export interface UsageExamples {
	/**
	 * 基础钩子使用示例
	 */
	basicHook: () => void;

	/**
	 * 过滤器使用示例
	 */
	filterUsage: () => void;

	/**
	 * 响应修改示例
	 */
	responseModification: () => void;

	/**
	 * 请求拦截示例
	 */
	requestIntercept: () => void;
}

/**
 * 常用的钩子模式类型
 */
export namespace HookPatterns {
	/**
	 * 日志记录钩子
	 */
	export type Logger = (request: AjaxRequest) => void;

	/**
	 * 请求修改钩子
	 */
	export type RequestModifier = (request: AjaxRequest) => void | Promise<void>;

	/**
	 * 响应拦截钩子
	 */
	export type ResponseInterceptor = (request: AjaxRequest) => void;

	/**
	 * 条件钩子
	 */
	export type ConditionalHook = (request: AjaxRequest) => boolean;
}
